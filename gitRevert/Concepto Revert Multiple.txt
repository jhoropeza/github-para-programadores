sentencia git

Agrupa todos los cambios en √∫nico commit. Bueno hacer el uncommit de varios commits. 
Verificando que no haya conflictos, primero

-- Comandos para detectar conflictos
git status Muestra si hay archivos en conflicto:

bash
git status
Si ves algo como Unmerged paths o both modified, significa que hay conflictos.

git diff --name-only --diff-filter=U Lista solo los archivos en conflicto:

bash
git diff --name-only --diff-filter=U

git ls-files -u Muestra detalles de los archivos en conflicto:

bash
git ls-files -u
üß† ¬øC√≥mo se ven los conflictos en los archivos?
Git marca los conflictos directamente en el contenido del archivo:

text
<<<<<<< HEAD
Tu versi√≥n local
=======
Versi√≥n de la rama que est√°s fusionando
>>>>>>> rama-remota
T√∫ decides qu√© l√≠neas conservar, eliminas los marcadores (<<<<<<<, =======, >>>>>>>) y luego haces:

git add <archivo>
git commit -m "Conflicto resuelto en <archivo>"


bash

git revert --no-commit <commit1>
git revert --no-commit <commit2>
git revert --no-commit <commit3>
# ... sigue seg√∫n necesites
git commit -m "Revertir m√∫ltiples cambios juntos"

git push origin main/master

---Para revertir un numero de commits digamos los ultimos tres (Crea un Nuevo commit y deja la historia)
git revert --no-commit HEAD~3..
git commit -m "Revirtiendo los √∫ltimos 3 commits"
git push


Enfoque	¬øQu√© hace?	Ventajas	Consideraciones
git revert --no-commit <commit1> (uno por uno)	Reviertes commits espec√≠ficos, en el orden que t√∫ defines.	            Control total sobre qu√© revertir y en qu√© orden.	M√°s manual, puede generar conflictos si el orden no es correcto.
git revert --no-commit HEAD~3..HEAD	                Reviertes un rango de commits consecutivos, desde HEAD~3 hasta HEAD.	M√°s r√°pido, √∫til para revertir los √∫ltimos N commits.	El orden es autom√°tico (de m√°s antiguo a m√°s reciente), y no puedes omitir commits intermedios.
HEAD~2
HEAD~1
HEAD

--- Recuerda
A..B significa: todos los commits que est√°n en B y no en A.

git revert -n HEAD~3.. es equivalente a git revert -n HEAD~3..HEAD.

Usar -n te deja los cambios aplicados en el working tree sin hacer commit.

Siempre revierte en orden inverso si los commits son dependientes.
git revert -n $(git rev-list HEAD~3..HEAD)
